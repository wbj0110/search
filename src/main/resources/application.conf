#kafka
kafka {
  #product
  #brokers = "solr1:9092"
  #test
  brokers= "121.40.241.26:9092"
  #brokers = "121.40.54.54:9092"
  groupid = "group1"
  producter {
    # topic = "test"
    #product
    #topic = "indexManagerProd"
    #test
    topic = "indexManagersTest3"
    type = "async"
  }
  consumer {
   # topic = "test"
    #product
   # topic = "indexManagerProd"
    #test
    topic = "indexManagersTest3"
  }
  serializer {
    class = "kafka.serializer.StringEncoder"
  }
}



#zookeeper
#product
#zk = "solr1:3213,solr2:3213,solr3:3213"
#test solr 121.40.241.26:2181/solr  kafka: 121.40.241.26:2181
zk = "121.40.241.26:2181"
#zk = "10.165.11.140:3213,10.168.29.126:3213,10.251.254.136:3213"



#for generate xml,use field.multivalued generate String[field][separator]
field {
  multivalued = "productPages => | &tags => ,&picUrl => |&cityId => _"
}

#save xml to disk filepath
filedir {
  #mergeclouds = "D:\\search\\datasource\\tmp\\mergeclouds\\"
  #screenclouds = "D:\\search\\datasource\\tmp\\screenclouds\\"
   mergeclouds = "/data/mergeclouds/"
  screenclouds = "/data/screenclouds/"
}

#solr
collection = "mergescloud"



#defaultcollection = "mergescloud"
#efaultattrcollection = "screencloud"
#defaultcollection = "mergescloud_test"
#defaultattrcollection = "screencloud_test"
#product
#defaultcollection = "mergescloud_prod"
#defaultattrcollection = "screencloud_prod"

#test
defaultcollection = "mergescloud"
defaultattrcollection = "screencloud"

defaultsuggestcollection = "kwsuggest"


#remote interface http
url {
  #mergeclouds = "http://192.168.50.125:8088/mergeclouds"
 # screenclouds = "http://192.168.50.125:8088/screenclouds"
   #mergeclouds = "http://192.168.0.249:8080/vehsy-pb/product/search/sku"
   #screenclouds = "http://192.168.0.249:8080/vehsy-pb/product/search/catattr"
   mergeclouds = "http://pb-test.ehsy.com/product/search/sku"
   screenclouds = "http://pb-test.ehsy.com/product/search/catattr"
  #mergeclouds = "http://192.168.4.82:8081/vehsy-pb/product/search/sku"
 # screenclouds = "http://192.168.4.82:8081/vehsy-pb/product/search/catattr"

}

#threads number
consumer{
  threads{
    number = 5  #if set ,get this else use core.threads.number * cores
  }
  core{
    threads{
      number = 2
    }
  }
}

threads {
  wait{
    number = 3000   #data in wait queue
  }
  sleep = 5000  #unit ms   if data in wait queue > number ,need sleep 2000 ms
}

pageSize = 150